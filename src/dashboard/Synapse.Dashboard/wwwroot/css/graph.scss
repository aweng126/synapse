@import "./theme/_variables.scss";
@import "../lib/bootstrap/scss/mixins";

//* Rainbow *
$call-color: #6e40aa;
$do-color: #b23cb2;
$emit-color: #ee4395;
$for-color: #ff5e63;
$fork-color: #ff8c38;
$listen-color: #d9c231;
$raise-color: #aff05b;
$run-color: #60f760;
$switch-color: #28ea8d;
$set-color: #1ac7c2;
$try-color: #2f96e0;
$wait-color: #5465d6;

//* Viridis *
//$call-color: #440154;
//$do-color: #482173;
//$emit-color: #433e85;
//$for-color: #38588c;
//$fork-color: #2d708e;
//$listen-color: #25858e;
//$raise-color: #1e9b8a;
//$run-color: #2ab07f;
//$switch-color: #52c569;
//$set-color: #86d549;
//$try-color: #c2df23;
//$wait-color: #fde725;


.graph-container {
    --stroke-color: #{$mute};
    --fill-color: #{$dark-bg-subtle-dark};
    display: flex;
    flex-direction: column;

    .graph-controls {
        display: flex;
        justify-content: flex-end;
        gap: $spacer;
        padding-right: 1rem;

        .btn {
            @include button-outline-variant($mute);
            color: var(--bs-btn-color);
            fill: var(--bs-btn-color);
            border: var(--bs-btn-border-width) solid var(--bs-btn-border-color);

            &:hover {
                color: var(--bs-btn-hover-color);
                fill: var(--bs-btn-hover-color);
                background-color: var(--bs-btn-hover-bg);
                border-color: var(--bs-btn-hover-border-color);
            }
        }
    }
}

#default-node-gradient {
    stop[offset="0"] {
        stop-color: $mute;
    }

    stop[offset="1"] {
        stop-color: shade-color($mute, 30%);
    }
}

#call-node-gradient {
    stop[offset="0"] {
        stop-color: $call-color;
    }

    stop[offset="1"] {
        stop-color: shade-color($call-color, 30%);
    }
}

#do-node-gradient {
    stop[offset="0"] {
        stop-color: $do-color;
    }

    stop[offset="1"] {
        stop-color: shade-color($do-color, 30%);
    }
}

#emit-node-gradient {
    stop[offset="0"] {
        stop-color: $emit-color;
    }

    stop[offset="1"] {
        stop-color: shade-color($emit-color, 30%);
    }
}

#for-node-gradient {
    stop[offset="0"] {
        stop-color: $for-color;
    }

    stop[offset="1"] {
        stop-color: shade-color($for-color, 30%);
    }
}

#fork-node-gradient {
    stop[offset="0"] {
        stop-color: $fork-color;
    }

    stop[offset="1"] {
        stop-color: shade-color($fork-color, 30%);
    }
}

#listen-node-gradient {
    stop[offset="0"] {
        stop-color: $listen-color;
    }

    stop[offset="1"] {
        stop-color: shade-color($listen-color, 30%);
    }
}

#raise-node-gradient {
    stop[offset="0"] {
        stop-color: $raise-color;
    }

    stop[offset="1"] {
        stop-color: shade-color($raise-color, 30%);
    }
}

#run-node-gradient {
    stop[offset="0"] {
        stop-color: $run-color;
    }

    stop[offset="1"] {
        stop-color: shade-color($run-color, 30%);
    }
}

#switch-node-gradient {
    stop[offset="0"] {
        stop-color: $switch-color;
    }

    stop[offset="1"] {
        stop-color: shade-color($switch-color, 30%);
    }
}

#set-node-gradient {
    stop[offset="0"] {
        stop-color: $set-color;
    }

    stop[offset="1"] {
        stop-color: shade-color($set-color, 30%);
    }
}

#try-node-gradient {
    stop[offset="0"] {
        stop-color: $try-color;
    }

    stop[offset="1"] {
        stop-color: shade-color($try-color, 30%);
    }
}

#wait-node-gradient {
    stop[offset="0"] {
        stop-color: $wait-color;
    }

    stop[offset="1"] {
        stop-color: shade-color($wait-color, 30%);
    }
}

.node {
    --gradient-url: url(#default-node-gradient);

    &.call-task-node {
        --gradient-url: url(#call-node-gradient);
    }

    &.do-task-node {
        --gradient-url: url(#do-node-gradient);
    }

    &.emit-task-node {
        --gradient-url: url(#emit-node-gradient);
    }

    &.for-task-node {
        --gradient-url: url(#for-node-gradient);
    }

    &.fork-task-node {
        --gradient-url: url(#fork-node-gradient);
    }

    &.listen-task-node {
        --gradient-url: url(#listen-node-gradient);
    }

    &.raise-task-node {
        --gradient-url: url(#raise-node-gradient);
    }

    &.run-task-node {
        --gradient-url: url(#run-node-gradient);
    }

    &.switch-task-node {
        --gradient-url: url(#switch-node-gradient);
    }

    &.set-task-node {
        --gradient-url: url(#set-node-gradient);
    }

    &.try-task-node {
        --gradient-url: url(#try-node-gradient);
    }

    &.wait-task-node {
        --gradient-url: url(#wait-node-gradient);
    }
    /*
    rect, circle, ellipse {
        stroke: $mute;
        fill: $dark-bg-subtle-dark;
        stroke-width: 1px;
    }*/

    .node-rectangle {
        stroke: var(--gradient-url);
        stroke-width: 3px;
    }

    .node-cartouche {
        fill: var(--gradient-url);
    }

    .label-content {
        width: 100%;
        height: 100%;
        /*
        display: flex;
        flex-direction: column;
        justify-content: center;
        */
        white-space: nowrap;
        text-overflow: ellipsis;
        overflow: hidden;

        h3 {
            margin-bottom: calc($spacer / 4);
            white-space: nowrap;
            text-overflow: ellipsis;
            overflow: hidden;
        }

        p {
            margin: 0;
            white-space: nowrap;
            text-overflow: ellipsis;
            overflow: hidden;
        }

        pre {
            margin: 0;
            height: 35px;
            text-overflow: ellipsis;
            overflow-x: hidden;
            overflow-y: auto;
        }
    }

    &.shape-cartouche {
        .label-content {
            text-align: left;
            padding: 5px 5px 5px 65px;
        }
    }
}

.symbol {
    fill: var(--bs-body-color);
}

.start-node circle {
    stroke-width: 2px;
}

.end-node circle {
    stroke-width: 5px;
}