@*
    Copyright © 2024-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@implements IDisposable
@inject IApplicationLayout Layout

<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            @RouterWithLayout(typeof(MainLayout))
        </Authorized>
        <NotAuthorized>
            @RouterWithLayout(typeof(EmptyLayout))
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code
{
    // see https://github.com/dotnet/aspnetcore/issues/39456
    RenderFragment RouterWithLayout(Type layoutType) => __builder =>
    {
        <Router AppAssembly="@typeof(Program).Assembly">
            <Found Context="routeData">
                <PageTitle>Synapse - @Layout.Title?.ChildContent</PageTitle>
                    <AuthorizeRouteView RouteData="@routeData" DefaultLayout="layoutType">
                        <NotAuthorized>
                            @if (context.User.Identity?.IsAuthenticated != true)
                            {
                                <RedirectToLogin />
                            }
                            else
                            {
                                <p role="alert">You are not authorized to access this resource.</p>
                            }
                        </NotAuthorized>
                    </AuthorizeRouteView>
                <FocusOnNavigate RouteData="@routeData" Selector="h1" />
            </Found>
            <NotFound>
                <PageTitle>Not found</PageTitle>
                <LayoutView Layout="@layoutType">
                    <p>Sorry, there's nothing at this address.</p>
                </LayoutView>
            </NotFound>
        </Router>
    };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.Layout.PropertyChanged += this.OnLayoutPropertyChanged;
    }

    void OnLayoutPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        this.StateHasChanged();
    }

    public void Dispose()
    {
        this.Layout.PropertyChanged -= this.OnLayoutPropertyChanged;
        GC.SuppressFinalize(this);
    }

}