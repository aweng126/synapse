﻿@*
    Copyright © 2024-Present The Synapse Authors
    <p>
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    <p>
    http://www.apache.org/licenses/LICENSE-2.0
    <p>
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@page "/functions/new"
@page "/functions/new/{name}"
@using ServerlessWorkflow.Sdk.Models
@using Synapse.Api.Client.Services
@inherits StatefulComponent<View, CreateFunctionViewStore, CreateFunctionViewState>
@inject IBreadcrumbManager BreadcrumbManager
@inject NavigationManager NavigationManager

<ApplicationTitle>New function</ApplicationTitle>

<h4>New Function @((!string.IsNullOrEmpty(name) || !string.IsNullOrEmpty(chosenName)) ? $"({name??chosenName}:{version})" : "")</h4>

@if (loading)
{
    <div class="d-flex justify-content-center mt-5">
        <Loader />
    </div>
}
else if (string.IsNullOrEmpty(name) && string.IsNullOrEmpty(chosenName))
{
    <div class="d-flex mb-2 gap-2">
        <input type="text" class="form-control text-center" @oninput="e => nameInputValue = (string?)e.Value" placeholder="Name" />
        <Button Color="ButtonColor.Primary" Outline="true" @onclick="SetName">
            Next
        </Button>
    </div>
}
else
{
    <div class="d-flex justify-content-end mb-2">
        <PreferredLanguageSelector PreferredLanguageChange="Store.ToggleTextBasedEditorLanguageAsync" />
    </div>
    <StandaloneCodeEditor @ref="Store.TextEditor"
                          ConstructionOptions="Store.StandaloneEditorConstructionOptions"
                          OnDidInit="Store.OnTextBasedEditorInitAsync"
                          OnDidChangeModelContent="Store.OnDidChangeModelContent"
                          CssClass="h-100" />
    @if (problemDetails != null)
    {
        <div class="problems px-3">
            <Callout Color="CalloutColor.Danger" Heading="@problemDetails.Title" Class="position-relative">
                <Icon Name="IconName.X" Class="position-absolute" @onclick="() => Store.SetProblemDetails(null)" />
                <p>@problemDetails.Detail</p>

                @if (problemDetails.Errors != null && problemDetails.Errors.Any())
                {
                    foreach (KeyValuePair<string, string[]> errorContainer in problemDetails.Errors)
                    {
                        <strong>@errorContainer.Key:</strong>
                        <ul>
                            @foreach (string error in errorContainer.Value)
                            {
                                <li>@error</li>
                            }
                        </ul>
                    }
                }
            </Callout>
        </div>
    }
    <Button class="mt-3" Color="ButtonColor.Primary" Outline="true" Disabled="saving" @onclick="async (_) => await Store.SaveCustomFunctionAsync()">
        @if(!saving)
        {
            @("Save")
        }
        else
        {
            <Spinner Size="SpinnerSize.Small" Color="SpinnerColor.Primary" />
        }
    </Button>
}

@code {

    string? name;
    string? version;
    string? chosenName;
    string? nameInputValue;
    bool loading;
    bool saving;
    ProblemDetails? problemDetails = null;

    [Parameter] public string? Name { get; set; }

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        BreadcrumbManager.Use(Breadcrumbs.Functions);
        BreadcrumbManager.Add(new("New", "/functions/new"));
        Store.Name.Subscribe(value => OnStateChanged(_ => name = value), token: CancellationTokenSource.Token);
        Store.ChosenName.Subscribe(value => OnStateChanged(_ => chosenName = value), token: CancellationTokenSource.Token);
        Store.Version.Subscribe(value => OnStateChanged(_ => version = value?.ToString()), token: CancellationTokenSource.Token);
        Store.Loading.Subscribe(value => OnStateChanged(_ => loading = value), token: CancellationTokenSource.Token);
        Store.Saving.Subscribe(value => OnStateChanged(_ => saving = value), token: CancellationTokenSource.Token);
        Store.ProblemDetails.Subscribe(problemDetails => OnStateChanged(cmp => cmp.problemDetails = problemDetails), token: CancellationTokenSource.Token);
    }

    /// <inheritdoc/>
    protected override void OnParametersSet()
    {
        if (Name != name) Store.SetName(Name);
    }

    protected void SetName()
    {
        if (string.IsNullOrEmpty(nameInputValue)) return;
        Store.SetChosenName(nameInputValue);
    }

}