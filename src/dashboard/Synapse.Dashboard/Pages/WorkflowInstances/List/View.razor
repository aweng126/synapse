@page "/workflow-instances"
@attribute [Authorize]
@namespace Synapse.Dashboard.Pages.WorkflowInstances.List
@using BlazorBootstrap
@inherits NamespacedResourceManagementComponent<View, WorkflowInstanceListComponentStore, WorkflowInstanceListState, WorkflowInstance>
@inject IBreadcrumbManager BreadcrumbManager

<ApplicationTitle>Workflow Instances</ApplicationTitle>

<WorkflowInstancesList Loading="Loading"
                       Title="Title()"
                       Workflows="Workflows"
                       Namespaces="Namespaces"
                       WorkflowInstances="Resources"
                       OnWorkflowChanged="OnWorkflowChanged"
                       OnNamespaceChanged="OnNamespaceChanged"
                       OnSearchInput="OnSearchInput"
                       OnShowDetails="OnShowInstanceDetailsAsync"
                       OnDelete="OnDeleteResourceAsync"></WorkflowInstancesList>

<Button Outline="true" Color="ButtonColor.Primary" @onclick="async _ => await OnShowResourceEditorAsync()"><Icon Name="IconName.Plus" /></Button>

<Offcanvas @ref="DetailsOffCanvas" Size="OffcanvasSize.Large" UseStaticBackdrop="false" BodyCssClass="d-flex flex-column" />

<Offcanvas @ref="EditorOffCanvas" Size="OffcanvasSize.Large" UseStaticBackdrop="false" BodyCssClass="d-flex flex-column" />

<ConfirmDialog @ref="Dialog" />

@code{

    RenderFragment Title() => __builder =>
    {
        <h4>Workflow Instances</h4>
    };

    /// <summary>
    /// Gets the list of available <see cref="Workflow"/>s
    /// </summary>
    protected EquatableList<Workflow>? Workflows { get; set; }

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        BreadcrumbManager.Use(Breadcrumbs.WorkflowInstances);
        this.Store.Workflows.Subscribe(workflows => this.OnStateChanged(cmp => cmp.Workflows = workflows), token: this.CancellationTokenSource.Token);
        await this.Store.ListWorkflowsAsync().ConfigureAwait(false);
    }

    /// <summary>
    /// Handles changes of the workflow selector
    /// </summary>
    /// <param name="e"></param>
    protected void OnWorkflowChanged(ChangeEventArgs e)
    {
        var workflowQualifiedName = e.Value?.ToString();
        if (string.IsNullOrWhiteSpace(workflowQualifiedName))
        {
            this.Store.RemoveLabelSelector(SynapseDefaults.Resources.Labels.Workflow);
        }
        else
        {
            this.Store.AddLabelSelector(new(SynapseDefaults.Resources.Labels.Workflow, LabelSelectionOperator.Equals, workflowQualifiedName));
        }
    }

    /// <summary>
    /// Opens the targeted <see cref="WorkflowInstance"/>'s details
    /// </summary>
    /// <param name="instance">The <see cref="WorkflowInstance"/> to show the details for</param>
    protected Task OnShowInstanceDetailsAsync(WorkflowInstance instance)
    {
        if (this.DetailsOffCanvas == null) return Task.CompletedTask;
        var parameters = new Dictionary<string, object>
        {
            { "WorkflowInstance", instance }
        };
        return this.DetailsOffCanvas.ShowAsync<WorkflowInstanceDetails>(title: "Instance details", parameters: parameters);
    }

}