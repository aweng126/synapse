﻿@*
    Copyright © 2024-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@
@namespace Synapse.Dashboard.Components


<div class="table-container @ClassNames">
    @if (Loading)
    {
        <Loader />
    }
    <div class="d-flex flex-row justify-content-between align-items-center">
        @Title
        <span>@(WorkflowInstances?.Count() ?? 0) items</span>
        <div class="d-flex">
            @if (Workflows != null && Workflows.Count() > 1) {
                <select class="form-select m-2" @onchange="OnSelectWorkflowChangedAsync">
                    <option value="">All workflows</option>
                    @foreach (var workflowResource in Workflows)
                    {
                        <option value="@workflowResource.GetQualifiedName()">@workflowResource.GetQualifiedName()</option>
                    }
                </select>
            }
            @if (Namespaces != null && Namespaces.Count() > 0) {
                <select class="form-select m-2" @onchange="OnSelectNamespaceChangedAsync">
                    <option value="">All namespaces</option>
                    @foreach (var namespaceResource in Namespaces)
                    {
                        <option value="@namespaceResource.GetName()">@namespaceResource.GetName()</option>
                    }
                </select>
            }
            <input type="search" class="form-control rounded my-2 me-2" placeholder="Search" @oninput="OnSearchInputAsync" />
        </div>
    </div>
    <table class="table table-hover">
        <thead>
            <tr>
                @foreach (var column in columns)
                {
                    if(Columns.Count() == 0 || Columns.Contains(column))
                    {
                        <th class="sticky-header text-@GetColumnAlignment(column)">@(column != "Action" ? column : "")</th>
                    }
                }
            </tr>
        </thead>
        <tbody>
            @if (WorkflowInstances != null && WorkflowInstances.Any())
            {
                <Virtualize Context="instance" Items="@WorkflowInstances.ToList()">
                    <tr @onclick="async _ => await OnShowClickedAsync(instance)" class="cursor-pointer @(ActiveRow == instance.GetName() ? "table-active" : "")">
                        @foreach (var column in columns)
                        {
                            if (Columns.Count() == 0 || Columns.Contains(column))
                            {
                                <td class="text-@GetColumnAlignment(column)">
                                    @switch(column)
                                    {
                                        case "Name":
                                            @instance.Metadata.Name
                                            break;
                                        case "Namespace":
                                            <a href="#" @onclick:preventDefault="true" @onclick:stopPropagation="true">@instance.Metadata.Namespace</a>
                                            break;
                                        case "Definition":
                                            <a href="#" @onclick:preventDefault="true" @onclick:stopPropagation="true">@instance.Spec.Definition.ToString()</a>
                                            break;
                                        case "Status":
                                            <span class="badge rounded-pill badge rounded-pill border border-@instance.Status?.Phase.GetColorClass() text-@instance.Status?.Phase.GetColorClass()">@(instance.Status?.Phase ?? WorkflowInstanceStatusPhase.Pending)</span>
                                            break;
                                        case "Creation Time":
                                            @instance.Metadata.CreationTimestamp?.DateTime.RelativeFormat()
                                            break;
                                        case "Start Time":
                                            @(instance.Status?.StartedAt?.DateTime.RelativeFormat() ?? "-")
                                            break;
                                        case "End Time":
                                            @(instance.Status?.EndedAt?.DateTime.RelativeFormat() ?? "-")
                                            break;
                                        case "Duration":
                                            @(instance.Status?.StartedAt.HasValue == true && instance.Status?.EndedAt.HasValue == true ? instance.Status.EndedAt.Value.Subtract(instance.Status.StartedAt.Value).ToString("hh\\:mm\\:ss\\.fff") : "-")
                                            break;
                                        case "Operator":
                                            @if (instance.Metadata.Labels?.TryGetValue(SynapseDefaults.Resources.Labels.Operator, out var operatorName) == true && !string.IsNullOrWhiteSpace(operatorName))
                                            {
                                                <a href="#" @onclick:preventDefault="true" @onclick:stopPropagation="true">@operatorName</a>
                                            }
                                            else
                                            {
                                                <span>-</span>
                                            }
                                            break;
                                        case "Actions":
                                            <div class="dropdown">
                                                <button class="btn btn-sm btn-dark" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false" title="" @onclick:stopPropagation="true"><i class="bi bi-three-dots-vertical"></i></button>
                                                <ul class="dropdown-menu">
                                                    <li><a class="dropdown-item" href="#" @onclick="async _ => await OnShowClickedAsync(instance)" @onclick:preventDefault="true" @onclick:stopPropagation="true"><Icon Name="IconName.Eye" /> View</a></li>
                                                    <li><a class="dropdown-item text-danger" href="#" @onclick="async _ => await OnDeleteClickedAsync(instance)" @onclick:preventDefault="true" @onclick:stopPropagation="true"><Icon Name="IconName.Trash" /> Delete</a></li>
                                                </ul>
                                            </div>
                                            break;
                                        default:
                                            break;
                                    }
                                </td>
                            }
                        }
                    </tr>
                </Virtualize>
            }
        </tbody>
    </table>
</div>

@code {

    protected string? ClassNames => Class;
    [Parameter] public string? Class { get; set; }
    [Parameter] public RenderFragment? Title { get; set; }
    [Parameter] public bool Loading { get; set; } = true;
    [Parameter] public IEnumerable<string> Columns { get; set; } = [];
    [Parameter] public IEnumerable<WorkflowInstance>? WorkflowInstances { get; set; }
    [Parameter] public IEnumerable<Workflow>? Workflows { get; set; }
    [Parameter] public IEnumerable<Namespace>? Namespaces { get; set; }
    [Parameter] public string? ActiveRow { get; set; }

    [Parameter] public EventCallback<ChangeEventArgs> OnWorkflowChanged { get; set; }
    [Parameter] public EventCallback<ChangeEventArgs> OnNamespaceChanged { get; set; }
    [Parameter] public EventCallback<ChangeEventArgs> OnSearchInput { get; set; }
    [Parameter] public EventCallback<WorkflowInstance> OnShowDetails { get; set; }
    [Parameter] public EventCallback<WorkflowInstance> OnDelete { get; set; }

    IEnumerable<string> columns = [
        "Name",
        "Namespace",
        "Definition",
        "Status",
        "Creation Time",
        "Start Time",
        "End Time",
        "Duration",
        "Operator",
        "Actions"
    ];

    /// <summary>
    /// Gets the text alignment of the provided column
    /// </summary>
    /// <param name="column">The column to get the alignment for</param>
    /// <returns></returns>
    string GetColumnAlignment(string column)
    {
        return column == "Name" || column == "Namespace"
            ? "start"
            : column == "Action"
                ? "end"
                : "center";
    }

    /// <summary>
    /// Handles workflow selection changes
    /// </summary>
    /// <param name="e">the <see cref="ChangeEventArgs"/> to handle</param>
    /// <returns></returns>
    private async Task OnSelectWorkflowChangedAsync(ChangeEventArgs e)
    {
        if (this.OnWorkflowChanged.HasDelegate)
        {
            await this.OnWorkflowChanged.InvokeAsync(e);
        }
    }
    /// <summary>
    /// Handles namespace selection changes
    /// </summary>
    /// <param name="e">the <see cref="ChangeEventArgs"/> to handle</param>
    /// <returns></returns>
    private async Task OnSelectNamespaceChangedAsync(ChangeEventArgs e)
    {
        if (this.OnNamespaceChanged.HasDelegate)
        {
            await this.OnNamespaceChanged.InvokeAsync(e);
        }
    }
    /// <summary>
    /// Handles search input value changes
    /// </summary>
    /// <param name="e">the <see cref="ChangeEventArgs"/> to handle</param>
    protected async Task OnSearchInputAsync(ChangeEventArgs e)
    {
        if (this.OnSearchInput.HasDelegate)
        {
            await this.OnSearchInput.InvokeAsync(e);
        }
    }

    /// <summary>
    /// Handles the click on the show button
    /// </summary>
    /// <param name="instance"></param>
    /// <returns></returns>
    protected async Task OnShowClickedAsync(WorkflowInstance instance)
    {
        if (this.OnShowDetails.HasDelegate)
        {
            await this.OnShowDetails.InvokeAsync(instance);
        }
    }

    /// <summary>
    /// Handles the clikc on the delete button
    /// </summary>
    /// <param name="instance"></param>
    /// <returns></returns>
    protected async Task OnDeleteClickedAsync(WorkflowInstance instance)
    {
        if (this.OnDelete.HasDelegate)
        {
            await this.OnDelete.InvokeAsync(instance);
        }
    }
}