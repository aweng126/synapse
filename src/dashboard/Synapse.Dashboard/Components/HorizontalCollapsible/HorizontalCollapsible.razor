﻿@*
    Copyright © 2024-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@
@namespace Synapse.Dashboard.Components

<div class="horizontal-collapse d-flex flex-column @(isCollapsed ? "flew-grow-0 collapsed": "col") @ClassNames">
    <div class="title px-2 cursor-pointer" @onclick="async (_) => await OnToggleAsync()">
        <span>
            @if(isCollapsed)
            {
                <Icon Name="IconName.CaretRight"></Icon>
            }
            else
            {
                <Icon Name="IconName.CaretDown"></Icon>
            }
            </span>
        <span class="label">@Label</span>
        @if (OnClose.HasDelegate)
        {
            <i class="bi bi-x" @onclick="async (_) => await OnCloseAsync()" @onclick:preventDefault="true" @onclick:stopPropagation="true"></i>
        }
    </div>
    @if (!isCollapsed)
    {
        <div class="content flex-grow">
            @Content
        </div>
    }
</div>

@code {
    private bool isCollapsed = false;

    protected string? ClassNames => Class;
    [Parameter] public string? Class { get; set; }
    [Parameter] public RenderFragment Label { get; set; } = default!;
    [Parameter] public RenderFragment Content { get; set; } = default!;
    [Parameter] public EventCallback OnShown { get; set; }
    [Parameter] public EventCallback OnHidden { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
    }

    async Task OnToggleAsync()
    {
        isCollapsed = !isCollapsed;
        if (isCollapsed && OnHidden.HasDelegate)
        {
            await OnHidden.InvokeAsync();
        }
        if (!isCollapsed && OnShown.HasDelegate)
        {
            await OnShown.InvokeAsync();
        }
    }

    async Task OnCloseAsync()
    {
        if (OnClose.HasDelegate)
        {
            await OnClose.InvokeAsync();
        }
    }
 }
