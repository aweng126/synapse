﻿@*
    Copyright © 2024-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard.Components
@using Synapse.Dashboard.Components.ReferenceDetailsStateManagement
@inherits StatefulComponent<ReferenceDetails, ReferenceDetailsStore, ReferenceDetailsState>

<Accordion @ref="accordion" Flush="true" OnShowing="Store.LoadReferencedDocumentAsync">
    <AccordionItem Title="@label" Name="Reference">
        <Content>
            @if (!loaded)
            {
                <Spinner Class="me-3" Color="SpinnerColor.Primary" Size="SpinnerSize.Small" />
            }
            else
            {
                <PreferredLanguageSelector PreferedLanguageChange="Store.ToggleTextBasedEditorLanguageAsync" />
                <StandaloneCodeEditor @ref="Store.TextEditor"
                                      ConstructionOptions="Store.StandaloneEditorConstructionOptions"
                                      OnDidInit="Store.OnTextBasedEditorInitAsync"
                                      CssClass="h-100-px" />
            }
            @if (problemDetails != null)
            {
                <div class="problems">
                    <Callout Type="CalloutType.Danger" Heading="@problemDetails.Title">
                        @problemDetails.Detail
                </Callout>
                    @if (problemDetails.Errors != null && problemDetails.Errors.Any())
                    {
                            foreach (KeyValuePair<string, string[]> errorContainer in problemDetails.Errors)
                        {
                            <Callout Type="CalloutType.Danger" Heading="@errorContainer.Key">
                                <ul>
                                    @foreach (string error in errorContainer.Value)
                                    {
                                        <li>@error</li>
                                    }
                                </ul>
                            </Callout>
                        }
                    }
                </div>
            }
        </Content>
    </AccordionItem>
</Accordion>

@code {
    /// <summary>
    /// The label to display
    /// </summary>
    [Parameter] public string Label { get; set; } = null!;
    /// <summary>
    /// The reference of the document to load
    /// </summary>
    [Parameter] public string Reference { get; set; } = null!;

    /// <summary>
    /// The <see cref="Accordion" /> reference
    /// </summary>
    private Accordion accordion = default!;
    /// <summary>
    /// The internal label
    /// </summary>
    private string label = "";
    /// <summary>
    /// The internal reference
    /// </summary>
    private string reference = "";
    /// <summary>
    /// The internal boolean indicating if the resource already loaded
    /// </summary>
    private bool loaded = false;
    /// <summary>
    /// The <see cref="ProblemDetails"/> that occurred when trying to save the resource, if any
    /// </summary>
    private ProblemDetails? problemDetails = null;

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync().ConfigureAwait(false);
        this.Store.Label.Subscribe(newLabel => this.OnStateChanged(cmp => cmp.label = newLabel), token: this.CancellationTokenSource.Token);
        this.Store.Reference.Subscribe(newReference => this.OnStateChanged(cmp => cmp.reference = newReference), token: this.CancellationTokenSource.Token);
        this.Store.Loaded.Subscribe(newLoading => this.OnStateChanged(cmp => cmp.loaded = newLoading), token: this.CancellationTokenSource.Token);
        this.Store.ProblemDetails.Subscribe(newProblemDetails => this.OnStateChanged(cmp => cmp.problemDetails = newProblemDetails), token: this.CancellationTokenSource.Token);
    }

    /// <inheritdoc/>
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (this.label != this.Label)
        {
            this.Store.SetLabel(this.Label);
        }
        if (this.reference != this.Reference)
        {
            this.Store.SetReference(this.Reference);
        }
        if (this.accordion != null)
        {
            await this.accordion.HideFirstAccordionItemAsync();
        }
    }
}
