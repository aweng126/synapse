@namespace Synapse.Dashboard

<g class="shape">
    @if (Node.Shape == NodeShape.Circle)
    {
        <Circle Bounds="bounds" />
    }
    else if (Node.Shape == NodeShape.Ellipse)
    {
        <Ellipse Bounds="bounds" />
    }
    else if (Node.Shape == SynapseNodeShape.Cartouche)
    {
        if (!WorkflowNode.IsCluster)
        {
            <rect class="node-rectangle" x="@(bounds.X.ToInvariantString())"
                y="@(bounds.Y.ToInvariantString())"
                   width="@(bounds.Width.ToInvariantString())"
                   height="@(bounds.Height.ToInvariantString())"
                   rx="@((Node.RadiusX).ToInvariantString())"
                   ry="@((Node.RadiusY).ToInvariantString())" />
            <path class="node-cartouche" d="
                m @(bounds.X.ToInvariantString()) @((bounds.Y + Node.RadiusX).ToInvariantString()) 
                c 0 -@((Node.RadiusX / 2).ToInvariantString()) @((Node.RadiusX / 2).ToInvariantString()) -@(Node.RadiusX.ToInvariantString()) @(Node.RadiusX.ToInvariantString()) -@(Node.RadiusX.ToInvariantString()) 
                h @(((bounds.Width / 8) - 1).ToInvariantString()) 
                v @(bounds.Height.ToInvariantString()) 
                h -@(((bounds.Width / 8) - 1).ToInvariantString()) 
                c -@((Node.RadiusX / 2).ToInvariantString()) 0 -@(Node.RadiusX.ToInvariantString()) -@((Node.RadiusX / 2).ToInvariantString()) -@(Node.RadiusX.ToInvariantString()) -@(Node.RadiusX.ToInvariantString()) 
                z"
            />
        }
        else
        {
            <rect class="node-rectangle" x="@(bounds.X.ToInvariantString())"
                  y="@(bounds.Y.ToInvariantString())"
                  width="@(bounds.Width.ToInvariantString())"
                  height="@(bounds.Height.ToInvariantString())"
                  rx="@((Node.RadiusX).ToInvariantString())"
                  ry="@((Node.RadiusY).ToInvariantString())" />
            <path class="node-cartouche" d="
                m @(bounds.X.ToInvariantString()) @((bounds.Y + Node.RadiusX).ToInvariantString()) 
                c 0 -@((Node.RadiusX / 2).ToInvariantString()) @((Node.RadiusX / 2).ToInvariantString()) -@(Node.RadiusX.ToInvariantString()) @(Node.RadiusX.ToInvariantString()) -@(Node.RadiusX.ToInvariantString()) 
                h @((bounds.Width - (Node.RadiusX * 2)).ToInvariantString()) 
                c @((Node.RadiusX / 2).ToInvariantString()) 0 @(Node.RadiusX.ToInvariantString()) @((Node.RadiusY / 2).ToInvariantString()) @(Node.RadiusX.ToInvariantString()) @(Node.RadiusY.ToInvariantString())
                v @(Constants.ClusterHeight + 10)
                h -@(bounds.Width.ToInvariantString()) 
                z"
            />
        }
    }
    else
    {
        <Rectangle Bounds="bounds" RadiusX="Node.RadiusX" RadiusY="Node.RadiusY" />
    }
</g>

@code {

    BoundingBox bounds => Node.Bounds!;
    [CascadingParameter(Name = "Node")] public INodeViewModel Node { get; set; } = null!;
    protected virtual IWorkflowNodeViewModel WorkflowNode => (IWorkflowNodeViewModel)this.Node;

}