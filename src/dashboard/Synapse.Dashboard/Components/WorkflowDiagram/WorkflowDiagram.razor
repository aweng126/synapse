﻿@*
    Copyright © 2024-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@using ServerlessWorkflow.Sdk.Models
@using Synapse.Dashboard.Components.WorkflowDiagramStateManagement
@namespace Synapse.Dashboard
@inherits StatefulComponent<WorkflowDiagram, WorkflowDiagramStore, WorkflowDiagramState>

@if (graph != null)
{
    <svg class="svg-definitions"
         version="1.2"
         baseProfile="tiny"
         xmlns="http://www.w3.org/2000/svg"
         xmlns:xlink="http://www.w3.org/1999/xlink">
        <defs>
            <!-- Instead of thoses defs, we could use graph.referenceableComponentTypes, but it needs to be set in the constructor which is not handy -->
            <marker id="large-end-arrow"
                    class="marker arrow"
                    viewBox="0 0 10 10"
                    refX="0"
                    refY="5"
                    markerUnits="strokeWidth"
                    markerWidth="15"
                    markerHeight="15"
                    orient="auto">
                <path d="M 0 0 L 10 5 L 0 10 z" />
            </marker>
            <svg id="legend" viewBox="0 0 18 18">
                <!-- from https://www.svgrepo.com/svg/451049/legend -->
                <path fill-rule="evenodd" d="m2.4 8.1q-0.2-0.1-0.5-0.3-0.2-0.2-0.3-0.5-0.1-0.3-0.1-0.5c0-0.7 0.4-1.2 0.9-1.4 0.6-0.3 1.2-0.1 1.7 0.3 0.4 0.4 0.5 1.1 0.3 1.6-0.2 0.6-0.8 1-1.4 1q-0.3-0.1-0.6-0.2zm0.3-2q-0.1 0-0.2 0.1-0.1 0.1-0.2 0.3 0 0.1 0 0.3c0 0.3 0.1 0.5 0.4 0.6 0.3 0.2 0.6 0.1 0.8-0.1 0.2-0.2 0.3-0.6 0.2-0.8-0.1-0.3-0.4-0.5-0.7-0.5q-0.1 0-0.3 0.1zm13.8-3.8v0.7h-9.8v-0.7zm0 4.5v0.7h-9.7v-0.7zm0 4.5v0.7h-9.8v-0.7zm0 4.5v0.7h-9.7v-0.7zm-13.5-1.4l1.5 2.9h-3zm0.2 2l-0.2-0.5-0.3 0.5zm1.2-15.7v3h-3v-3zm-0.8 0.7h-1.5v1.5h1.5zm0.8 8.3v3h-3v-3zm-0.8 0.7h-1.5v1.5h1.5z" />
                <path fill="none" fill-rule="evenodd" d="m18 0v18h-18v-18z" />
            </svg>
        </defs>
    </svg>
    <DagreGraph @ref="Store.DagreGraph" OnMouseDown="HandleOnMouseDown" OnMouseUp="HandleOnMouseUp" Options="options" Graph="graph">
        <CenterControl>
            <CenterControl />
        </CenterControl>
        <ZoomToFitControl>
            <ZoomToFitControl />
        </ZoomToFitControl>
        <SaveAsPngControl>
            <SaveAsPngControl />
        </SaveAsPngControl>
        <ExtraControls>
            <Button Outline="true" Color="ButtonColor.Primary" Size="ButtonSize.Small" @onclick="Store.ToggleLegend" TooltipTitle="Legend">
                <svg>
                    <use href="#legend" />
                </svg>
            </Button>
        </ExtraControls>
    </DagreGraph>

    @if (isLegendVisible)
    {
        <Legend />
    }
}

@code {
    [Parameter] public EventCallback<GraphEventArgs<MouseEventArgs>> OnMouseUp { get; set; }
    WorkflowDefinition? workflowDefinition = null;
    [Parameter] public WorkflowDefinition WorkflowDefinition { get; set; } = null!;
    WorkflowDiagramOrientation orientation = default!;
    [Parameter] public WorkflowDiagramOrientation Orientation { get; set; } = WorkflowDiagramOrientation.TopToBottom;
    EquatableList<WorkflowInstance> workflowInstances = [];
    [Parameter] public EquatableList<WorkflowInstance> WorkflowInstances { get; set; } = [];

    IGraphViewModel? graph;
    IDagreGraphOptions? options = null;
    bool isLegendVisible = false;
    bool isDirty = true; // moving isDirty to the State/Store seems to have unwanted behavior, the `ShouldRender` method doesn't seem to behave properly.

    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync().ConfigureAwait(false);
        Store.WorkflowDefinition.Subscribe(value => OnStateChanged(_ => workflowDefinition = value), token: CancellationTokenSource.Token);
        Store.WorkflowInstances.Subscribe(value => OnStateChanged(_ => workflowInstances = value), token: CancellationTokenSource.Token);
        Store.Orientation.Subscribe(value => OnStateChanged(_ => orientation = value), token: CancellationTokenSource.Token);
        Store.IsLegendVisible.Subscribe(value => OnStateChanged(_ =>
        {
            isLegendVisible = value;
            isDirty = true;
        }), token: CancellationTokenSource.Token);
        Observable.CombineLatest(
            Store.Graph.Where(g => g != null),
            Store.Options.Where(o => o != null),
            (graph, options) => (graph, options)
        ).Subscribe((values) =>
        {
            var (newGraph, newOptions) = values;
            OnStateChanged(_ =>
            {
                graph = newGraph;
                options = newOptions;
                isDirty = true;
            });
        }, token: CancellationTokenSource.Token);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (this.Orientation != this.orientation)
        {
            this.Store.SetOrientation(this.Orientation);
        }
        if (this.WorkflowDefinition != null && this.WorkflowDefinition != this.workflowDefinition)
        {
            this.Store.SetWorkflowDefinition(this.WorkflowDefinition);
        }
        if (this.WorkflowInstances != this.workflowInstances)
        {
            this.Store.SetWorkflowInstances(this.WorkflowInstances);
        }
    }

    protected override bool ShouldRender()
    {
        if (!this.isDirty) return false;
        this.isDirty = false;
        return true;
    }

    protected void HandleOnMouseDown(GraphEventArgs<MouseEventArgs> e)
    {
        if (e.GraphElement == null && graph != null)
        {
            graph.CssClass = "grabbing";
            isDirty = true;
        }
    }

    protected async Task HandleOnMouseUp(GraphEventArgs<MouseEventArgs> e)
    {
        if (e.GraphElement == null && graph != null)
        {
            graph.CssClass = "";
            isDirty = true;
        }
        if (OnMouseUp.HasDelegate)
        {
            await OnMouseUp.InvokeAsync(e);
        }
    }

}